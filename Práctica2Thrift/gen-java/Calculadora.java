/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Calculadora {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public double sumar(int num1, int num2) throws org.apache.thrift.TException;

    public double restar(int num1, int num2) throws org.apache.thrift.TException;

    public double multiplicar(int num1, int num2) throws org.apache.thrift.TException;

    public double dividir(int num1, int num2) throws org.apache.thrift.TException;

    public List<Integer> sumarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException;

    public List<Integer> restarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException;

    public List<Integer> multiplicarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException;

    public List<Integer> productoVectorial(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException;

    public double productoEscalar(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException;

    public List<List<Integer>> productoMatrices(List<List<Integer>> m1, List<List<Integer>> m2) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sumar(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restar(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multiplicar(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dividir(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sumarVectores(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restarVectores(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multiplicarVectores(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void productoVectorial(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void productoEscalar(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void productoMatrices(List<List<Integer>> m1, List<List<Integer>> m2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public double sumar(int num1, int num2) throws org.apache.thrift.TException
    {
      send_sumar(num1, num2);
      return recv_sumar();
    }

    public void send_sumar(int num1, int num2) throws org.apache.thrift.TException
    {
      sumar_args args = new sumar_args();
      args.setNum1(num1);
      args.setNum2(num2);
      sendBase("sumar", args);
    }

    public double recv_sumar() throws org.apache.thrift.TException
    {
      sumar_result result = new sumar_result();
      receiveBase(result, "sumar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sumar failed: unknown result");
    }

    public double restar(int num1, int num2) throws org.apache.thrift.TException
    {
      send_restar(num1, num2);
      return recv_restar();
    }

    public void send_restar(int num1, int num2) throws org.apache.thrift.TException
    {
      restar_args args = new restar_args();
      args.setNum1(num1);
      args.setNum2(num2);
      sendBase("restar", args);
    }

    public double recv_restar() throws org.apache.thrift.TException
    {
      restar_result result = new restar_result();
      receiveBase(result, "restar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restar failed: unknown result");
    }

    public double multiplicar(int num1, int num2) throws org.apache.thrift.TException
    {
      send_multiplicar(num1, num2);
      return recv_multiplicar();
    }

    public void send_multiplicar(int num1, int num2) throws org.apache.thrift.TException
    {
      multiplicar_args args = new multiplicar_args();
      args.setNum1(num1);
      args.setNum2(num2);
      sendBase("multiplicar", args);
    }

    public double recv_multiplicar() throws org.apache.thrift.TException
    {
      multiplicar_result result = new multiplicar_result();
      receiveBase(result, "multiplicar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiplicar failed: unknown result");
    }

    public double dividir(int num1, int num2) throws org.apache.thrift.TException
    {
      send_dividir(num1, num2);
      return recv_dividir();
    }

    public void send_dividir(int num1, int num2) throws org.apache.thrift.TException
    {
      dividir_args args = new dividir_args();
      args.setNum1(num1);
      args.setNum2(num2);
      sendBase("dividir", args);
    }

    public double recv_dividir() throws org.apache.thrift.TException
    {
      dividir_result result = new dividir_result();
      receiveBase(result, "dividir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dividir failed: unknown result");
    }

    public List<Integer> sumarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      send_sumarVectores(v1, v2);
      return recv_sumarVectores();
    }

    public void send_sumarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      sumarVectores_args args = new sumarVectores_args();
      args.setV1(v1);
      args.setV2(v2);
      sendBase("sumarVectores", args);
    }

    public List<Integer> recv_sumarVectores() throws org.apache.thrift.TException
    {
      sumarVectores_result result = new sumarVectores_result();
      receiveBase(result, "sumarVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sumarVectores failed: unknown result");
    }

    public List<Integer> restarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      send_restarVectores(v1, v2);
      return recv_restarVectores();
    }

    public void send_restarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      restarVectores_args args = new restarVectores_args();
      args.setV1(v1);
      args.setV2(v2);
      sendBase("restarVectores", args);
    }

    public List<Integer> recv_restarVectores() throws org.apache.thrift.TException
    {
      restarVectores_result result = new restarVectores_result();
      receiveBase(result, "restarVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restarVectores failed: unknown result");
    }

    public List<Integer> multiplicarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      send_multiplicarVectores(v1, v2);
      return recv_multiplicarVectores();
    }

    public void send_multiplicarVectores(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      multiplicarVectores_args args = new multiplicarVectores_args();
      args.setV1(v1);
      args.setV2(v2);
      sendBase("multiplicarVectores", args);
    }

    public List<Integer> recv_multiplicarVectores() throws org.apache.thrift.TException
    {
      multiplicarVectores_result result = new multiplicarVectores_result();
      receiveBase(result, "multiplicarVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiplicarVectores failed: unknown result");
    }

    public List<Integer> productoVectorial(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      send_productoVectorial(v1, v2);
      return recv_productoVectorial();
    }

    public void send_productoVectorial(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      productoVectorial_args args = new productoVectorial_args();
      args.setV1(v1);
      args.setV2(v2);
      sendBase("productoVectorial", args);
    }

    public List<Integer> recv_productoVectorial() throws org.apache.thrift.TException
    {
      productoVectorial_result result = new productoVectorial_result();
      receiveBase(result, "productoVectorial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "productoVectorial failed: unknown result");
    }

    public double productoEscalar(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      send_productoEscalar(v1, v2);
      return recv_productoEscalar();
    }

    public void send_productoEscalar(List<Integer> v1, List<Integer> v2) throws org.apache.thrift.TException
    {
      productoEscalar_args args = new productoEscalar_args();
      args.setV1(v1);
      args.setV2(v2);
      sendBase("productoEscalar", args);
    }

    public double recv_productoEscalar() throws org.apache.thrift.TException
    {
      productoEscalar_result result = new productoEscalar_result();
      receiveBase(result, "productoEscalar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "productoEscalar failed: unknown result");
    }

    public List<List<Integer>> productoMatrices(List<List<Integer>> m1, List<List<Integer>> m2) throws org.apache.thrift.TException
    {
      send_productoMatrices(m1, m2);
      return recv_productoMatrices();
    }

    public void send_productoMatrices(List<List<Integer>> m1, List<List<Integer>> m2) throws org.apache.thrift.TException
    {
      productoMatrices_args args = new productoMatrices_args();
      args.setM1(m1);
      args.setM2(m2);
      sendBase("productoMatrices", args);
    }

    public List<List<Integer>> recv_productoMatrices() throws org.apache.thrift.TException
    {
      productoMatrices_result result = new productoMatrices_result();
      receiveBase(result, "productoMatrices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "productoMatrices failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void sumar(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sumar_call method_call = new sumar_call(num1, num2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sumar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num1;
      private int num2;
      public sumar_call(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num1 = num1;
        this.num2 = num2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sumar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sumar_args args = new sumar_args();
        args.setNum1(num1);
        args.setNum2(num2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sumar();
      }
    }

    public void restar(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restar_call method_call = new restar_call(num1, num2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num1;
      private int num2;
      public restar_call(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num1 = num1;
        this.num2 = num2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restar_args args = new restar_args();
        args.setNum1(num1);
        args.setNum2(num2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restar();
      }
    }

    public void multiplicar(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiplicar_call method_call = new multiplicar_call(num1, num2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiplicar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num1;
      private int num2;
      public multiplicar_call(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num1 = num1;
        this.num2 = num2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiplicar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiplicar_args args = new multiplicar_args();
        args.setNum1(num1);
        args.setNum2(num2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiplicar();
      }
    }

    public void dividir(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dividir_call method_call = new dividir_call(num1, num2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dividir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num1;
      private int num2;
      public dividir_call(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num1 = num1;
        this.num2 = num2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dividir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dividir_args args = new dividir_args();
        args.setNum1(num1);
        args.setNum2(num2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dividir();
      }
    }

    public void sumarVectores(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sumarVectores_call method_call = new sumarVectores_call(v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sumarVectores_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> v1;
      private List<Integer> v2;
      public sumarVectores_call(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sumarVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sumarVectores_args args = new sumarVectores_args();
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sumarVectores();
      }
    }

    public void restarVectores(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restarVectores_call method_call = new restarVectores_call(v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restarVectores_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> v1;
      private List<Integer> v2;
      public restarVectores_call(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restarVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restarVectores_args args = new restarVectores_args();
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restarVectores();
      }
    }

    public void multiplicarVectores(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiplicarVectores_call method_call = new multiplicarVectores_call(v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiplicarVectores_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> v1;
      private List<Integer> v2;
      public multiplicarVectores_call(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiplicarVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiplicarVectores_args args = new multiplicarVectores_args();
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiplicarVectores();
      }
    }

    public void productoVectorial(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      productoVectorial_call method_call = new productoVectorial_call(v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class productoVectorial_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> v1;
      private List<Integer> v2;
      public productoVectorial_call(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("productoVectorial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        productoVectorial_args args = new productoVectorial_args();
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_productoVectorial();
      }
    }

    public void productoEscalar(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      productoEscalar_call method_call = new productoEscalar_call(v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class productoEscalar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> v1;
      private List<Integer> v2;
      public productoEscalar_call(List<Integer> v1, List<Integer> v2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("productoEscalar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        productoEscalar_args args = new productoEscalar_args();
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_productoEscalar();
      }
    }

    public void productoMatrices(List<List<Integer>> m1, List<List<Integer>> m2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      productoMatrices_call method_call = new productoMatrices_call(m1, m2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class productoMatrices_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Integer>> m1;
      private List<List<Integer>> m2;
      public productoMatrices_call(List<List<Integer>> m1, List<List<Integer>> m2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.m1 = m1;
        this.m2 = m2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("productoMatrices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        productoMatrices_args args = new productoMatrices_args();
        args.setM1(m1);
        args.setM2(m2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Integer>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_productoMatrices();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("sumar", new sumar());
      processMap.put("restar", new restar());
      processMap.put("multiplicar", new multiplicar());
      processMap.put("dividir", new dividir());
      processMap.put("sumarVectores", new sumarVectores());
      processMap.put("restarVectores", new restarVectores());
      processMap.put("multiplicarVectores", new multiplicarVectores());
      processMap.put("productoVectorial", new productoVectorial());
      processMap.put("productoEscalar", new productoEscalar());
      processMap.put("productoMatrices", new productoMatrices());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class sumar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sumar_args> {
      public sumar() {
        super("sumar");
      }

      public sumar_args getEmptyArgsInstance() {
        return new sumar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sumar_result getResult(I iface, sumar_args args) throws org.apache.thrift.TException {
        sumar_result result = new sumar_result();
        result.success = iface.sumar(args.num1, args.num2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class restar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restar_args> {
      public restar() {
        super("restar");
      }

      public restar_args getEmptyArgsInstance() {
        return new restar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restar_result getResult(I iface, restar_args args) throws org.apache.thrift.TException {
        restar_result result = new restar_result();
        result.success = iface.restar(args.num1, args.num2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multiplicar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiplicar_args> {
      public multiplicar() {
        super("multiplicar");
      }

      public multiplicar_args getEmptyArgsInstance() {
        return new multiplicar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multiplicar_result getResult(I iface, multiplicar_args args) throws org.apache.thrift.TException {
        multiplicar_result result = new multiplicar_result();
        result.success = iface.multiplicar(args.num1, args.num2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class dividir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dividir_args> {
      public dividir() {
        super("dividir");
      }

      public dividir_args getEmptyArgsInstance() {
        return new dividir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dividir_result getResult(I iface, dividir_args args) throws org.apache.thrift.TException {
        dividir_result result = new dividir_result();
        result.success = iface.dividir(args.num1, args.num2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sumarVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sumarVectores_args> {
      public sumarVectores() {
        super("sumarVectores");
      }

      public sumarVectores_args getEmptyArgsInstance() {
        return new sumarVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sumarVectores_result getResult(I iface, sumarVectores_args args) throws org.apache.thrift.TException {
        sumarVectores_result result = new sumarVectores_result();
        result.success = iface.sumarVectores(args.v1, args.v2);
        return result;
      }
    }

    public static class restarVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restarVectores_args> {
      public restarVectores() {
        super("restarVectores");
      }

      public restarVectores_args getEmptyArgsInstance() {
        return new restarVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restarVectores_result getResult(I iface, restarVectores_args args) throws org.apache.thrift.TException {
        restarVectores_result result = new restarVectores_result();
        result.success = iface.restarVectores(args.v1, args.v2);
        return result;
      }
    }

    public static class multiplicarVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiplicarVectores_args> {
      public multiplicarVectores() {
        super("multiplicarVectores");
      }

      public multiplicarVectores_args getEmptyArgsInstance() {
        return new multiplicarVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multiplicarVectores_result getResult(I iface, multiplicarVectores_args args) throws org.apache.thrift.TException {
        multiplicarVectores_result result = new multiplicarVectores_result();
        result.success = iface.multiplicarVectores(args.v1, args.v2);
        return result;
      }
    }

    public static class productoVectorial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, productoVectorial_args> {
      public productoVectorial() {
        super("productoVectorial");
      }

      public productoVectorial_args getEmptyArgsInstance() {
        return new productoVectorial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public productoVectorial_result getResult(I iface, productoVectorial_args args) throws org.apache.thrift.TException {
        productoVectorial_result result = new productoVectorial_result();
        result.success = iface.productoVectorial(args.v1, args.v2);
        return result;
      }
    }

    public static class productoEscalar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, productoEscalar_args> {
      public productoEscalar() {
        super("productoEscalar");
      }

      public productoEscalar_args getEmptyArgsInstance() {
        return new productoEscalar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public productoEscalar_result getResult(I iface, productoEscalar_args args) throws org.apache.thrift.TException {
        productoEscalar_result result = new productoEscalar_result();
        result.success = iface.productoEscalar(args.v1, args.v2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class productoMatrices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, productoMatrices_args> {
      public productoMatrices() {
        super("productoMatrices");
      }

      public productoMatrices_args getEmptyArgsInstance() {
        return new productoMatrices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public productoMatrices_result getResult(I iface, productoMatrices_args args) throws org.apache.thrift.TException {
        productoMatrices_result result = new productoMatrices_result();
        result.success = iface.productoMatrices(args.m1, args.m2);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("sumar", new sumar());
      processMap.put("restar", new restar());
      processMap.put("multiplicar", new multiplicar());
      processMap.put("dividir", new dividir());
      processMap.put("sumarVectores", new sumarVectores());
      processMap.put("restarVectores", new restarVectores());
      processMap.put("multiplicarVectores", new multiplicarVectores());
      processMap.put("productoVectorial", new productoVectorial());
      processMap.put("productoEscalar", new productoEscalar());
      processMap.put("productoMatrices", new productoMatrices());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class sumar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sumar_args, Double> {
      public sumar() {
        super("sumar");
      }

      public sumar_args getEmptyArgsInstance() {
        return new sumar_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            sumar_result result = new sumar_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sumar_result result = new sumar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sumar_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.sumar(args.num1, args.num2,resultHandler);
      }
    }

    public static class restar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restar_args, Double> {
      public restar() {
        super("restar");
      }

      public restar_args getEmptyArgsInstance() {
        return new restar_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            restar_result result = new restar_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restar_result result = new restar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restar_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.restar(args.num1, args.num2,resultHandler);
      }
    }

    public static class multiplicar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiplicar_args, Double> {
      public multiplicar() {
        super("multiplicar");
      }

      public multiplicar_args getEmptyArgsInstance() {
        return new multiplicar_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            multiplicar_result result = new multiplicar_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multiplicar_result result = new multiplicar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiplicar_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.multiplicar(args.num1, args.num2,resultHandler);
      }
    }

    public static class dividir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dividir_args, Double> {
      public dividir() {
        super("dividir");
      }

      public dividir_args getEmptyArgsInstance() {
        return new dividir_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            dividir_result result = new dividir_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dividir_result result = new dividir_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dividir_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.dividir(args.num1, args.num2,resultHandler);
      }
    }

    public static class sumarVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sumarVectores_args, List<Integer>> {
      public sumarVectores() {
        super("sumarVectores");
      }

      public sumarVectores_args getEmptyArgsInstance() {
        return new sumarVectores_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            sumarVectores_result result = new sumarVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sumarVectores_result result = new sumarVectores_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sumarVectores_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.sumarVectores(args.v1, args.v2,resultHandler);
      }
    }

    public static class restarVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restarVectores_args, List<Integer>> {
      public restarVectores() {
        super("restarVectores");
      }

      public restarVectores_args getEmptyArgsInstance() {
        return new restarVectores_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            restarVectores_result result = new restarVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restarVectores_result result = new restarVectores_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restarVectores_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.restarVectores(args.v1, args.v2,resultHandler);
      }
    }

    public static class multiplicarVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiplicarVectores_args, List<Integer>> {
      public multiplicarVectores() {
        super("multiplicarVectores");
      }

      public multiplicarVectores_args getEmptyArgsInstance() {
        return new multiplicarVectores_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            multiplicarVectores_result result = new multiplicarVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multiplicarVectores_result result = new multiplicarVectores_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiplicarVectores_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.multiplicarVectores(args.v1, args.v2,resultHandler);
      }
    }

    public static class productoVectorial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, productoVectorial_args, List<Integer>> {
      public productoVectorial() {
        super("productoVectorial");
      }

      public productoVectorial_args getEmptyArgsInstance() {
        return new productoVectorial_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            productoVectorial_result result = new productoVectorial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            productoVectorial_result result = new productoVectorial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, productoVectorial_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.productoVectorial(args.v1, args.v2,resultHandler);
      }
    }

    public static class productoEscalar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, productoEscalar_args, Double> {
      public productoEscalar() {
        super("productoEscalar");
      }

      public productoEscalar_args getEmptyArgsInstance() {
        return new productoEscalar_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            productoEscalar_result result = new productoEscalar_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            productoEscalar_result result = new productoEscalar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, productoEscalar_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.productoEscalar(args.v1, args.v2,resultHandler);
      }
    }

    public static class productoMatrices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, productoMatrices_args, List<List<Integer>>> {
      public productoMatrices() {
        super("productoMatrices");
      }

      public productoMatrices_args getEmptyArgsInstance() {
        return new productoMatrices_args();
      }

      public AsyncMethodCallback<List<List<Integer>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Integer>>>() { 
          public void onComplete(List<List<Integer>> o) {
            productoMatrices_result result = new productoMatrices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            productoMatrices_result result = new productoMatrices_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, productoMatrices_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<Integer>>> resultHandler) throws TException {
        iface.productoMatrices(args.m1, args.m2,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sumar_args implements org.apache.thrift.TBase<sumar_args, sumar_args._Fields>, java.io.Serializable, Cloneable, Comparable<sumar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumar_args");

    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumar_argsTupleSchemeFactory());
    }

    public int num1; // required
    public int num2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM1((short)1, "num1"),
      NUM2((short)2, "num2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM1
            return NUM1;
          case 2: // NUM2
            return NUM2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private static final int __NUM2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumar_args.class, metaDataMap);
    }

    public sumar_args() {
    }

    public sumar_args(
      int num1,
      int num2)
    {
      this();
      this.num1 = num1;
      setNum1IsSet(true);
      this.num2 = num2;
      setNum2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumar_args(sumar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num1 = other.num1;
      this.num2 = other.num2;
    }

    public sumar_args deepCopy() {
      return new sumar_args(this);
    }

    @Override
    public void clear() {
      setNum1IsSet(false);
      this.num1 = 0;
      setNum2IsSet(false);
      this.num2 = 0;
    }

    public int getNum1() {
      return this.num1;
    }

    public sumar_args setNum1(int num1) {
      this.num1 = num1;
      setNum1IsSet(true);
      return this;
    }

    public void unsetNum1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public int getNum2() {
      return this.num2;
    }

    public sumar_args setNum2(int num2) {
      this.num2 = num2;
      setNum2IsSet(true);
      return this;
    }

    public void unsetNum2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    /** Returns true if field num2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    public void setNum2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          setNum1((Integer)value);
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          setNum2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM1:
        return Integer.valueOf(getNum1());

      case NUM2:
        return Integer.valueOf(getNum2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumar_args)
        return this.equals((sumar_args)that);
      return false;
    }

    public boolean equals(sumar_args that) {
      if (that == null)
        return false;

      boolean this_present_num1 = true;
      boolean that_present_num1 = true;
      if (this_present_num1 || that_present_num1) {
        if (!(this_present_num1 && that_present_num1))
          return false;
        if (this.num1 != that.num1)
          return false;
      }

      boolean this_present_num2 = true;
      boolean that_present_num2 = true;
      if (this_present_num2 || that_present_num2) {
        if (!(this_present_num2 && that_present_num2))
          return false;
        if (this.num2 != that.num2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sumar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumar_args(");
      boolean first = true;

      sb.append("num1:");
      sb.append(this.num1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num2:");
      sb.append(this.num2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumar_argsStandardSchemeFactory implements SchemeFactory {
      public sumar_argsStandardScheme getScheme() {
        return new sumar_argsStandardScheme();
      }
    }

    private static class sumar_argsStandardScheme extends StandardScheme<sumar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num2 = iprot.readI32();
                struct.setNum2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM1_FIELD_DESC);
        oprot.writeI32(struct.num1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM2_FIELD_DESC);
        oprot.writeI32(struct.num2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumar_argsTupleSchemeFactory implements SchemeFactory {
      public sumar_argsTupleScheme getScheme() {
        return new sumar_argsTupleScheme();
      }
    }

    private static class sumar_argsTupleScheme extends TupleScheme<sumar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum1()) {
          optionals.set(0);
        }
        if (struct.isSetNum2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNum1()) {
          oprot.writeI32(struct.num1);
        }
        if (struct.isSetNum2()) {
          oprot.writeI32(struct.num2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.num1 = iprot.readI32();
          struct.setNum1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.num2 = iprot.readI32();
          struct.setNum2IsSet(true);
        }
      }
    }

  }

  public static class sumar_result implements org.apache.thrift.TBase<sumar_result, sumar_result._Fields>, java.io.Serializable, Cloneable, Comparable<sumar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumar_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumar_result.class, metaDataMap);
    }

    public sumar_result() {
    }

    public sumar_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumar_result(sumar_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sumar_result deepCopy() {
      return new sumar_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public sumar_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumar_result)
        return this.equals((sumar_result)that);
      return false;
    }

    public boolean equals(sumar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sumar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumar_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumar_resultStandardSchemeFactory implements SchemeFactory {
      public sumar_resultStandardScheme getScheme() {
        return new sumar_resultStandardScheme();
      }
    }

    private static class sumar_resultStandardScheme extends StandardScheme<sumar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumar_resultTupleSchemeFactory implements SchemeFactory {
      public sumar_resultTupleScheme getScheme() {
        return new sumar_resultTupleScheme();
      }
    }

    private static class sumar_resultTupleScheme extends TupleScheme<sumar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class restar_args implements org.apache.thrift.TBase<restar_args, restar_args._Fields>, java.io.Serializable, Cloneable, Comparable<restar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restar_args");

    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restar_argsTupleSchemeFactory());
    }

    public int num1; // required
    public int num2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM1((short)1, "num1"),
      NUM2((short)2, "num2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM1
            return NUM1;
          case 2: // NUM2
            return NUM2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private static final int __NUM2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restar_args.class, metaDataMap);
    }

    public restar_args() {
    }

    public restar_args(
      int num1,
      int num2)
    {
      this();
      this.num1 = num1;
      setNum1IsSet(true);
      this.num2 = num2;
      setNum2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restar_args(restar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num1 = other.num1;
      this.num2 = other.num2;
    }

    public restar_args deepCopy() {
      return new restar_args(this);
    }

    @Override
    public void clear() {
      setNum1IsSet(false);
      this.num1 = 0;
      setNum2IsSet(false);
      this.num2 = 0;
    }

    public int getNum1() {
      return this.num1;
    }

    public restar_args setNum1(int num1) {
      this.num1 = num1;
      setNum1IsSet(true);
      return this;
    }

    public void unsetNum1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public int getNum2() {
      return this.num2;
    }

    public restar_args setNum2(int num2) {
      this.num2 = num2;
      setNum2IsSet(true);
      return this;
    }

    public void unsetNum2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    /** Returns true if field num2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    public void setNum2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          setNum1((Integer)value);
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          setNum2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM1:
        return Integer.valueOf(getNum1());

      case NUM2:
        return Integer.valueOf(getNum2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restar_args)
        return this.equals((restar_args)that);
      return false;
    }

    public boolean equals(restar_args that) {
      if (that == null)
        return false;

      boolean this_present_num1 = true;
      boolean that_present_num1 = true;
      if (this_present_num1 || that_present_num1) {
        if (!(this_present_num1 && that_present_num1))
          return false;
        if (this.num1 != that.num1)
          return false;
      }

      boolean this_present_num2 = true;
      boolean that_present_num2 = true;
      if (this_present_num2 || that_present_num2) {
        if (!(this_present_num2 && that_present_num2))
          return false;
        if (this.num2 != that.num2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restar_args(");
      boolean first = true;

      sb.append("num1:");
      sb.append(this.num1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num2:");
      sb.append(this.num2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restar_argsStandardSchemeFactory implements SchemeFactory {
      public restar_argsStandardScheme getScheme() {
        return new restar_argsStandardScheme();
      }
    }

    private static class restar_argsStandardScheme extends StandardScheme<restar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num2 = iprot.readI32();
                struct.setNum2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM1_FIELD_DESC);
        oprot.writeI32(struct.num1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM2_FIELD_DESC);
        oprot.writeI32(struct.num2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restar_argsTupleSchemeFactory implements SchemeFactory {
      public restar_argsTupleScheme getScheme() {
        return new restar_argsTupleScheme();
      }
    }

    private static class restar_argsTupleScheme extends TupleScheme<restar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum1()) {
          optionals.set(0);
        }
        if (struct.isSetNum2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNum1()) {
          oprot.writeI32(struct.num1);
        }
        if (struct.isSetNum2()) {
          oprot.writeI32(struct.num2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.num1 = iprot.readI32();
          struct.setNum1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.num2 = iprot.readI32();
          struct.setNum2IsSet(true);
        }
      }
    }

  }

  public static class restar_result implements org.apache.thrift.TBase<restar_result, restar_result._Fields>, java.io.Serializable, Cloneable, Comparable<restar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restar_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restar_result.class, metaDataMap);
    }

    public restar_result() {
    }

    public restar_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restar_result(restar_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public restar_result deepCopy() {
      return new restar_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public restar_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restar_result)
        return this.equals((restar_result)that);
      return false;
    }

    public boolean equals(restar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restar_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restar_resultStandardSchemeFactory implements SchemeFactory {
      public restar_resultStandardScheme getScheme() {
        return new restar_resultStandardScheme();
      }
    }

    private static class restar_resultStandardScheme extends StandardScheme<restar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restar_resultTupleSchemeFactory implements SchemeFactory {
      public restar_resultTupleScheme getScheme() {
        return new restar_resultTupleScheme();
      }
    }

    private static class restar_resultTupleScheme extends TupleScheme<restar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multiplicar_args implements org.apache.thrift.TBase<multiplicar_args, multiplicar_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicar_args");

    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiplicar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiplicar_argsTupleSchemeFactory());
    }

    public int num1; // required
    public int num2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM1((short)1, "num1"),
      NUM2((short)2, "num2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM1
            return NUM1;
          case 2: // NUM2
            return NUM2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private static final int __NUM2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicar_args.class, metaDataMap);
    }

    public multiplicar_args() {
    }

    public multiplicar_args(
      int num1,
      int num2)
    {
      this();
      this.num1 = num1;
      setNum1IsSet(true);
      this.num2 = num2;
      setNum2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicar_args(multiplicar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num1 = other.num1;
      this.num2 = other.num2;
    }

    public multiplicar_args deepCopy() {
      return new multiplicar_args(this);
    }

    @Override
    public void clear() {
      setNum1IsSet(false);
      this.num1 = 0;
      setNum2IsSet(false);
      this.num2 = 0;
    }

    public int getNum1() {
      return this.num1;
    }

    public multiplicar_args setNum1(int num1) {
      this.num1 = num1;
      setNum1IsSet(true);
      return this;
    }

    public void unsetNum1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public int getNum2() {
      return this.num2;
    }

    public multiplicar_args setNum2(int num2) {
      this.num2 = num2;
      setNum2IsSet(true);
      return this;
    }

    public void unsetNum2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    /** Returns true if field num2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    public void setNum2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          setNum1((Integer)value);
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          setNum2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM1:
        return Integer.valueOf(getNum1());

      case NUM2:
        return Integer.valueOf(getNum2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicar_args)
        return this.equals((multiplicar_args)that);
      return false;
    }

    public boolean equals(multiplicar_args that) {
      if (that == null)
        return false;

      boolean this_present_num1 = true;
      boolean that_present_num1 = true;
      if (this_present_num1 || that_present_num1) {
        if (!(this_present_num1 && that_present_num1))
          return false;
        if (this.num1 != that.num1)
          return false;
      }

      boolean this_present_num2 = true;
      boolean that_present_num2 = true;
      if (this_present_num2 || that_present_num2) {
        if (!(this_present_num2 && that_present_num2))
          return false;
        if (this.num2 != that.num2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multiplicar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicar_args(");
      boolean first = true;

      sb.append("num1:");
      sb.append(this.num1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num2:");
      sb.append(this.num2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicar_argsStandardSchemeFactory implements SchemeFactory {
      public multiplicar_argsStandardScheme getScheme() {
        return new multiplicar_argsStandardScheme();
      }
    }

    private static class multiplicar_argsStandardScheme extends StandardScheme<multiplicar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num2 = iprot.readI32();
                struct.setNum2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM1_FIELD_DESC);
        oprot.writeI32(struct.num1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM2_FIELD_DESC);
        oprot.writeI32(struct.num2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicar_argsTupleSchemeFactory implements SchemeFactory {
      public multiplicar_argsTupleScheme getScheme() {
        return new multiplicar_argsTupleScheme();
      }
    }

    private static class multiplicar_argsTupleScheme extends TupleScheme<multiplicar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum1()) {
          optionals.set(0);
        }
        if (struct.isSetNum2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNum1()) {
          oprot.writeI32(struct.num1);
        }
        if (struct.isSetNum2()) {
          oprot.writeI32(struct.num2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.num1 = iprot.readI32();
          struct.setNum1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.num2 = iprot.readI32();
          struct.setNum2IsSet(true);
        }
      }
    }

  }

  public static class multiplicar_result implements org.apache.thrift.TBase<multiplicar_result, multiplicar_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiplicar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiplicar_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicar_result.class, metaDataMap);
    }

    public multiplicar_result() {
    }

    public multiplicar_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicar_result(multiplicar_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multiplicar_result deepCopy() {
      return new multiplicar_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public multiplicar_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicar_result)
        return this.equals((multiplicar_result)that);
      return false;
    }

    public boolean equals(multiplicar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multiplicar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicar_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicar_resultStandardSchemeFactory implements SchemeFactory {
      public multiplicar_resultStandardScheme getScheme() {
        return new multiplicar_resultStandardScheme();
      }
    }

    private static class multiplicar_resultStandardScheme extends StandardScheme<multiplicar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicar_resultTupleSchemeFactory implements SchemeFactory {
      public multiplicar_resultTupleScheme getScheme() {
        return new multiplicar_resultTupleScheme();
      }
    }

    private static class multiplicar_resultTupleScheme extends TupleScheme<multiplicar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dividir_args implements org.apache.thrift.TBase<dividir_args, dividir_args._Fields>, java.io.Serializable, Cloneable, Comparable<dividir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dividir_args");

    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dividir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dividir_argsTupleSchemeFactory());
    }

    public int num1; // required
    public int num2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM1((short)1, "num1"),
      NUM2((short)2, "num2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM1
            return NUM1;
          case 2: // NUM2
            return NUM2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private static final int __NUM2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dividir_args.class, metaDataMap);
    }

    public dividir_args() {
    }

    public dividir_args(
      int num1,
      int num2)
    {
      this();
      this.num1 = num1;
      setNum1IsSet(true);
      this.num2 = num2;
      setNum2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dividir_args(dividir_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num1 = other.num1;
      this.num2 = other.num2;
    }

    public dividir_args deepCopy() {
      return new dividir_args(this);
    }

    @Override
    public void clear() {
      setNum1IsSet(false);
      this.num1 = 0;
      setNum2IsSet(false);
      this.num2 = 0;
    }

    public int getNum1() {
      return this.num1;
    }

    public dividir_args setNum1(int num1) {
      this.num1 = num1;
      setNum1IsSet(true);
      return this;
    }

    public void unsetNum1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public int getNum2() {
      return this.num2;
    }

    public dividir_args setNum2(int num2) {
      this.num2 = num2;
      setNum2IsSet(true);
      return this;
    }

    public void unsetNum2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    /** Returns true if field num2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    public void setNum2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          setNum1((Integer)value);
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          setNum2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM1:
        return Integer.valueOf(getNum1());

      case NUM2:
        return Integer.valueOf(getNum2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dividir_args)
        return this.equals((dividir_args)that);
      return false;
    }

    public boolean equals(dividir_args that) {
      if (that == null)
        return false;

      boolean this_present_num1 = true;
      boolean that_present_num1 = true;
      if (this_present_num1 || that_present_num1) {
        if (!(this_present_num1 && that_present_num1))
          return false;
        if (this.num1 != that.num1)
          return false;
      }

      boolean this_present_num2 = true;
      boolean that_present_num2 = true;
      if (this_present_num2 || that_present_num2) {
        if (!(this_present_num2 && that_present_num2))
          return false;
        if (this.num2 != that.num2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dividir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dividir_args(");
      boolean first = true;

      sb.append("num1:");
      sb.append(this.num1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num2:");
      sb.append(this.num2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dividir_argsStandardSchemeFactory implements SchemeFactory {
      public dividir_argsStandardScheme getScheme() {
        return new dividir_argsStandardScheme();
      }
    }

    private static class dividir_argsStandardScheme extends StandardScheme<dividir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dividir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num2 = iprot.readI32();
                struct.setNum2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dividir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM1_FIELD_DESC);
        oprot.writeI32(struct.num1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM2_FIELD_DESC);
        oprot.writeI32(struct.num2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dividir_argsTupleSchemeFactory implements SchemeFactory {
      public dividir_argsTupleScheme getScheme() {
        return new dividir_argsTupleScheme();
      }
    }

    private static class dividir_argsTupleScheme extends TupleScheme<dividir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dividir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum1()) {
          optionals.set(0);
        }
        if (struct.isSetNum2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNum1()) {
          oprot.writeI32(struct.num1);
        }
        if (struct.isSetNum2()) {
          oprot.writeI32(struct.num2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dividir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.num1 = iprot.readI32();
          struct.setNum1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.num2 = iprot.readI32();
          struct.setNum2IsSet(true);
        }
      }
    }

  }

  public static class dividir_result implements org.apache.thrift.TBase<dividir_result, dividir_result._Fields>, java.io.Serializable, Cloneable, Comparable<dividir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dividir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dividir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dividir_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dividir_result.class, metaDataMap);
    }

    public dividir_result() {
    }

    public dividir_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dividir_result(dividir_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public dividir_result deepCopy() {
      return new dividir_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public dividir_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dividir_result)
        return this.equals((dividir_result)that);
      return false;
    }

    public boolean equals(dividir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dividir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dividir_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dividir_resultStandardSchemeFactory implements SchemeFactory {
      public dividir_resultStandardScheme getScheme() {
        return new dividir_resultStandardScheme();
      }
    }

    private static class dividir_resultStandardScheme extends StandardScheme<dividir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dividir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dividir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dividir_resultTupleSchemeFactory implements SchemeFactory {
      public dividir_resultTupleScheme getScheme() {
        return new dividir_resultTupleScheme();
      }
    }

    private static class dividir_resultTupleScheme extends TupleScheme<dividir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dividir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dividir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sumarVectores_args implements org.apache.thrift.TBase<sumarVectores_args, sumarVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<sumarVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumarVectores_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumarVectores_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumarVectores_argsTupleSchemeFactory());
    }

    public List<Integer> v1; // required
    public List<Integer> v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumarVectores_args.class, metaDataMap);
    }

    public sumarVectores_args() {
    }

    public sumarVectores_args(
      List<Integer> v1,
      List<Integer> v2)
    {
      this();
      this.v1 = v1;
      this.v2 = v2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumarVectores_args(sumarVectores_args other) {
      if (other.isSetV1()) {
        List<Integer> __this__v1 = new ArrayList<Integer>(other.v1);
        this.v1 = __this__v1;
      }
      if (other.isSetV2()) {
        List<Integer> __this__v2 = new ArrayList<Integer>(other.v2);
        this.v2 = __this__v2;
      }
    }

    public sumarVectores_args deepCopy() {
      return new sumarVectores_args(this);
    }

    @Override
    public void clear() {
      this.v1 = null;
      this.v2 = null;
    }

    public int getV1Size() {
      return (this.v1 == null) ? 0 : this.v1.size();
    }

    public java.util.Iterator<Integer> getV1Iterator() {
      return (this.v1 == null) ? null : this.v1.iterator();
    }

    public void addToV1(int elem) {
      if (this.v1 == null) {
        this.v1 = new ArrayList<Integer>();
      }
      this.v1.add(elem);
    }

    public List<Integer> getV1() {
      return this.v1;
    }

    public sumarVectores_args setV1(List<Integer> v1) {
      this.v1 = v1;
      return this;
    }

    public void unsetV1() {
      this.v1 = null;
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return this.v1 != null;
    }

    public void setV1IsSet(boolean value) {
      if (!value) {
        this.v1 = null;
      }
    }

    public int getV2Size() {
      return (this.v2 == null) ? 0 : this.v2.size();
    }

    public java.util.Iterator<Integer> getV2Iterator() {
      return (this.v2 == null) ? null : this.v2.iterator();
    }

    public void addToV2(int elem) {
      if (this.v2 == null) {
        this.v2 = new ArrayList<Integer>();
      }
      this.v2.add(elem);
    }

    public List<Integer> getV2() {
      return this.v2;
    }

    public sumarVectores_args setV2(List<Integer> v2) {
      this.v2 = v2;
      return this;
    }

    public void unsetV2() {
      this.v2 = null;
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return this.v2 != null;
    }

    public void setV2IsSet(boolean value) {
      if (!value) {
        this.v2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((List<Integer>)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return getV1();

      case V2:
        return getV2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumarVectores_args)
        return this.equals((sumarVectores_args)that);
      return false;
    }

    public boolean equals(sumarVectores_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true && this.isSetV1();
      boolean that_present_v1 = true && that.isSetV1();
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (!this.v1.equals(that.v1))
          return false;
      }

      boolean this_present_v2 = true && this.isSetV2();
      boolean that_present_v2 = true && that.isSetV2();
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (!this.v2.equals(that.v2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sumarVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumarVectores_args(");
      boolean first = true;

      sb.append("v1:");
      if (this.v1 == null) {
        sb.append("null");
      } else {
        sb.append(this.v1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      if (this.v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.v2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumarVectores_argsStandardSchemeFactory implements SchemeFactory {
      public sumarVectores_argsStandardScheme getScheme() {
        return new sumarVectores_argsStandardScheme();
      }
    }

    private static class sumarVectores_argsStandardScheme extends StandardScheme<sumarVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumarVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.v1 = new ArrayList<Integer>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    int _elem2;
                    _elem2 = iprot.readI32();
                    struct.v1.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.v2 = new ArrayList<Integer>(_list3.size);
                  for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                  {
                    int _elem5;
                    _elem5 = iprot.readI32();
                    struct.v2.add(_elem5);
                  }
                  iprot.readListEnd();
                }
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumarVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v1 != null) {
          oprot.writeFieldBegin(V1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v1.size()));
            for (int _iter6 : struct.v1)
            {
              oprot.writeI32(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v2 != null) {
          oprot.writeFieldBegin(V2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v2.size()));
            for (int _iter7 : struct.v2)
            {
              oprot.writeI32(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumarVectores_argsTupleSchemeFactory implements SchemeFactory {
      public sumarVectores_argsTupleScheme getScheme() {
        return new sumarVectores_argsTupleScheme();
      }
    }

    private static class sumarVectores_argsTupleScheme extends TupleScheme<sumarVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumarVectores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetV1()) {
          {
            oprot.writeI32(struct.v1.size());
            for (int _iter8 : struct.v1)
            {
              oprot.writeI32(_iter8);
            }
          }
        }
        if (struct.isSetV2()) {
          {
            oprot.writeI32(struct.v2.size());
            for (int _iter9 : struct.v2)
            {
              oprot.writeI32(_iter9);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumarVectores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v1 = new ArrayList<Integer>(_list10.size);
            for (int _i11 = 0; _i11 < _list10.size; ++_i11)
            {
              int _elem12;
              _elem12 = iprot.readI32();
              struct.v1.add(_elem12);
            }
          }
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v2 = new ArrayList<Integer>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              int _elem15;
              _elem15 = iprot.readI32();
              struct.v2.add(_elem15);
            }
          }
          struct.setV2IsSet(true);
        }
      }
    }

  }

  public static class sumarVectores_result implements org.apache.thrift.TBase<sumarVectores_result, sumarVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<sumarVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumarVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumarVectores_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumarVectores_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumarVectores_result.class, metaDataMap);
    }

    public sumarVectores_result() {
    }

    public sumarVectores_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumarVectores_result(sumarVectores_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public sumarVectores_result deepCopy() {
      return new sumarVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public sumarVectores_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumarVectores_result)
        return this.equals((sumarVectores_result)that);
      return false;
    }

    public boolean equals(sumarVectores_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sumarVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumarVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumarVectores_resultStandardSchemeFactory implements SchemeFactory {
      public sumarVectores_resultStandardScheme getScheme() {
        return new sumarVectores_resultStandardScheme();
      }
    }

    private static class sumarVectores_resultStandardScheme extends StandardScheme<sumarVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumarVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    int _elem18;
                    _elem18 = iprot.readI32();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumarVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter19 : struct.success)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumarVectores_resultTupleSchemeFactory implements SchemeFactory {
      public sumarVectores_resultTupleScheme getScheme() {
        return new sumarVectores_resultTupleScheme();
      }
    }

    private static class sumarVectores_resultTupleScheme extends TupleScheme<sumarVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumarVectores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter20 : struct.success)
            {
              oprot.writeI32(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumarVectores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              int _elem23;
              _elem23 = iprot.readI32();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class restarVectores_args implements org.apache.thrift.TBase<restarVectores_args, restarVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<restarVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restarVectores_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restarVectores_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restarVectores_argsTupleSchemeFactory());
    }

    public List<Integer> v1; // required
    public List<Integer> v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restarVectores_args.class, metaDataMap);
    }

    public restarVectores_args() {
    }

    public restarVectores_args(
      List<Integer> v1,
      List<Integer> v2)
    {
      this();
      this.v1 = v1;
      this.v2 = v2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restarVectores_args(restarVectores_args other) {
      if (other.isSetV1()) {
        List<Integer> __this__v1 = new ArrayList<Integer>(other.v1);
        this.v1 = __this__v1;
      }
      if (other.isSetV2()) {
        List<Integer> __this__v2 = new ArrayList<Integer>(other.v2);
        this.v2 = __this__v2;
      }
    }

    public restarVectores_args deepCopy() {
      return new restarVectores_args(this);
    }

    @Override
    public void clear() {
      this.v1 = null;
      this.v2 = null;
    }

    public int getV1Size() {
      return (this.v1 == null) ? 0 : this.v1.size();
    }

    public java.util.Iterator<Integer> getV1Iterator() {
      return (this.v1 == null) ? null : this.v1.iterator();
    }

    public void addToV1(int elem) {
      if (this.v1 == null) {
        this.v1 = new ArrayList<Integer>();
      }
      this.v1.add(elem);
    }

    public List<Integer> getV1() {
      return this.v1;
    }

    public restarVectores_args setV1(List<Integer> v1) {
      this.v1 = v1;
      return this;
    }

    public void unsetV1() {
      this.v1 = null;
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return this.v1 != null;
    }

    public void setV1IsSet(boolean value) {
      if (!value) {
        this.v1 = null;
      }
    }

    public int getV2Size() {
      return (this.v2 == null) ? 0 : this.v2.size();
    }

    public java.util.Iterator<Integer> getV2Iterator() {
      return (this.v2 == null) ? null : this.v2.iterator();
    }

    public void addToV2(int elem) {
      if (this.v2 == null) {
        this.v2 = new ArrayList<Integer>();
      }
      this.v2.add(elem);
    }

    public List<Integer> getV2() {
      return this.v2;
    }

    public restarVectores_args setV2(List<Integer> v2) {
      this.v2 = v2;
      return this;
    }

    public void unsetV2() {
      this.v2 = null;
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return this.v2 != null;
    }

    public void setV2IsSet(boolean value) {
      if (!value) {
        this.v2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((List<Integer>)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return getV1();

      case V2:
        return getV2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restarVectores_args)
        return this.equals((restarVectores_args)that);
      return false;
    }

    public boolean equals(restarVectores_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true && this.isSetV1();
      boolean that_present_v1 = true && that.isSetV1();
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (!this.v1.equals(that.v1))
          return false;
      }

      boolean this_present_v2 = true && this.isSetV2();
      boolean that_present_v2 = true && that.isSetV2();
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (!this.v2.equals(that.v2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restarVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restarVectores_args(");
      boolean first = true;

      sb.append("v1:");
      if (this.v1 == null) {
        sb.append("null");
      } else {
        sb.append(this.v1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      if (this.v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.v2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restarVectores_argsStandardSchemeFactory implements SchemeFactory {
      public restarVectores_argsStandardScheme getScheme() {
        return new restarVectores_argsStandardScheme();
      }
    }

    private static class restarVectores_argsStandardScheme extends StandardScheme<restarVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restarVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.v1 = new ArrayList<Integer>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    int _elem26;
                    _elem26 = iprot.readI32();
                    struct.v1.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                  struct.v2 = new ArrayList<Integer>(_list27.size);
                  for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                  {
                    int _elem29;
                    _elem29 = iprot.readI32();
                    struct.v2.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restarVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v1 != null) {
          oprot.writeFieldBegin(V1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v1.size()));
            for (int _iter30 : struct.v1)
            {
              oprot.writeI32(_iter30);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v2 != null) {
          oprot.writeFieldBegin(V2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v2.size()));
            for (int _iter31 : struct.v2)
            {
              oprot.writeI32(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restarVectores_argsTupleSchemeFactory implements SchemeFactory {
      public restarVectores_argsTupleScheme getScheme() {
        return new restarVectores_argsTupleScheme();
      }
    }

    private static class restarVectores_argsTupleScheme extends TupleScheme<restarVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restarVectores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetV1()) {
          {
            oprot.writeI32(struct.v1.size());
            for (int _iter32 : struct.v1)
            {
              oprot.writeI32(_iter32);
            }
          }
        }
        if (struct.isSetV2()) {
          {
            oprot.writeI32(struct.v2.size());
            for (int _iter33 : struct.v2)
            {
              oprot.writeI32(_iter33);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restarVectores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v1 = new ArrayList<Integer>(_list34.size);
            for (int _i35 = 0; _i35 < _list34.size; ++_i35)
            {
              int _elem36;
              _elem36 = iprot.readI32();
              struct.v1.add(_elem36);
            }
          }
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v2 = new ArrayList<Integer>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              int _elem39;
              _elem39 = iprot.readI32();
              struct.v2.add(_elem39);
            }
          }
          struct.setV2IsSet(true);
        }
      }
    }

  }

  public static class restarVectores_result implements org.apache.thrift.TBase<restarVectores_result, restarVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<restarVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restarVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restarVectores_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restarVectores_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restarVectores_result.class, metaDataMap);
    }

    public restarVectores_result() {
    }

    public restarVectores_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restarVectores_result(restarVectores_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public restarVectores_result deepCopy() {
      return new restarVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public restarVectores_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restarVectores_result)
        return this.equals((restarVectores_result)that);
      return false;
    }

    public boolean equals(restarVectores_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restarVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restarVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restarVectores_resultStandardSchemeFactory implements SchemeFactory {
      public restarVectores_resultStandardScheme getScheme() {
        return new restarVectores_resultStandardScheme();
      }
    }

    private static class restarVectores_resultStandardScheme extends StandardScheme<restarVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restarVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    int _elem42;
                    _elem42 = iprot.readI32();
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restarVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter43 : struct.success)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restarVectores_resultTupleSchemeFactory implements SchemeFactory {
      public restarVectores_resultTupleScheme getScheme() {
        return new restarVectores_resultTupleScheme();
      }
    }

    private static class restarVectores_resultTupleScheme extends TupleScheme<restarVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restarVectores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter44 : struct.success)
            {
              oprot.writeI32(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restarVectores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              int _elem47;
              _elem47 = iprot.readI32();
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multiplicarVectores_args implements org.apache.thrift.TBase<multiplicarVectores_args, multiplicarVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicarVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicarVectores_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiplicarVectores_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiplicarVectores_argsTupleSchemeFactory());
    }

    public List<Integer> v1; // required
    public List<Integer> v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicarVectores_args.class, metaDataMap);
    }

    public multiplicarVectores_args() {
    }

    public multiplicarVectores_args(
      List<Integer> v1,
      List<Integer> v2)
    {
      this();
      this.v1 = v1;
      this.v2 = v2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicarVectores_args(multiplicarVectores_args other) {
      if (other.isSetV1()) {
        List<Integer> __this__v1 = new ArrayList<Integer>(other.v1);
        this.v1 = __this__v1;
      }
      if (other.isSetV2()) {
        List<Integer> __this__v2 = new ArrayList<Integer>(other.v2);
        this.v2 = __this__v2;
      }
    }

    public multiplicarVectores_args deepCopy() {
      return new multiplicarVectores_args(this);
    }

    @Override
    public void clear() {
      this.v1 = null;
      this.v2 = null;
    }

    public int getV1Size() {
      return (this.v1 == null) ? 0 : this.v1.size();
    }

    public java.util.Iterator<Integer> getV1Iterator() {
      return (this.v1 == null) ? null : this.v1.iterator();
    }

    public void addToV1(int elem) {
      if (this.v1 == null) {
        this.v1 = new ArrayList<Integer>();
      }
      this.v1.add(elem);
    }

    public List<Integer> getV1() {
      return this.v1;
    }

    public multiplicarVectores_args setV1(List<Integer> v1) {
      this.v1 = v1;
      return this;
    }

    public void unsetV1() {
      this.v1 = null;
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return this.v1 != null;
    }

    public void setV1IsSet(boolean value) {
      if (!value) {
        this.v1 = null;
      }
    }

    public int getV2Size() {
      return (this.v2 == null) ? 0 : this.v2.size();
    }

    public java.util.Iterator<Integer> getV2Iterator() {
      return (this.v2 == null) ? null : this.v2.iterator();
    }

    public void addToV2(int elem) {
      if (this.v2 == null) {
        this.v2 = new ArrayList<Integer>();
      }
      this.v2.add(elem);
    }

    public List<Integer> getV2() {
      return this.v2;
    }

    public multiplicarVectores_args setV2(List<Integer> v2) {
      this.v2 = v2;
      return this;
    }

    public void unsetV2() {
      this.v2 = null;
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return this.v2 != null;
    }

    public void setV2IsSet(boolean value) {
      if (!value) {
        this.v2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((List<Integer>)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return getV1();

      case V2:
        return getV2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicarVectores_args)
        return this.equals((multiplicarVectores_args)that);
      return false;
    }

    public boolean equals(multiplicarVectores_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true && this.isSetV1();
      boolean that_present_v1 = true && that.isSetV1();
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (!this.v1.equals(that.v1))
          return false;
      }

      boolean this_present_v2 = true && this.isSetV2();
      boolean that_present_v2 = true && that.isSetV2();
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (!this.v2.equals(that.v2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multiplicarVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicarVectores_args(");
      boolean first = true;

      sb.append("v1:");
      if (this.v1 == null) {
        sb.append("null");
      } else {
        sb.append(this.v1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      if (this.v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.v2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicarVectores_argsStandardSchemeFactory implements SchemeFactory {
      public multiplicarVectores_argsStandardScheme getScheme() {
        return new multiplicarVectores_argsStandardScheme();
      }
    }

    private static class multiplicarVectores_argsStandardScheme extends StandardScheme<multiplicarVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicarVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.v1 = new ArrayList<Integer>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    int _elem50;
                    _elem50 = iprot.readI32();
                    struct.v1.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                  struct.v2 = new ArrayList<Integer>(_list51.size);
                  for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                  {
                    int _elem53;
                    _elem53 = iprot.readI32();
                    struct.v2.add(_elem53);
                  }
                  iprot.readListEnd();
                }
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicarVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v1 != null) {
          oprot.writeFieldBegin(V1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v1.size()));
            for (int _iter54 : struct.v1)
            {
              oprot.writeI32(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v2 != null) {
          oprot.writeFieldBegin(V2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v2.size()));
            for (int _iter55 : struct.v2)
            {
              oprot.writeI32(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicarVectores_argsTupleSchemeFactory implements SchemeFactory {
      public multiplicarVectores_argsTupleScheme getScheme() {
        return new multiplicarVectores_argsTupleScheme();
      }
    }

    private static class multiplicarVectores_argsTupleScheme extends TupleScheme<multiplicarVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicarVectores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetV1()) {
          {
            oprot.writeI32(struct.v1.size());
            for (int _iter56 : struct.v1)
            {
              oprot.writeI32(_iter56);
            }
          }
        }
        if (struct.isSetV2()) {
          {
            oprot.writeI32(struct.v2.size());
            for (int _iter57 : struct.v2)
            {
              oprot.writeI32(_iter57);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicarVectores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v1 = new ArrayList<Integer>(_list58.size);
            for (int _i59 = 0; _i59 < _list58.size; ++_i59)
            {
              int _elem60;
              _elem60 = iprot.readI32();
              struct.v1.add(_elem60);
            }
          }
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v2 = new ArrayList<Integer>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              int _elem63;
              _elem63 = iprot.readI32();
              struct.v2.add(_elem63);
            }
          }
          struct.setV2IsSet(true);
        }
      }
    }

  }

  public static class multiplicarVectores_result implements org.apache.thrift.TBase<multiplicarVectores_result, multiplicarVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicarVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicarVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiplicarVectores_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiplicarVectores_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicarVectores_result.class, metaDataMap);
    }

    public multiplicarVectores_result() {
    }

    public multiplicarVectores_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicarVectores_result(multiplicarVectores_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public multiplicarVectores_result deepCopy() {
      return new multiplicarVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public multiplicarVectores_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicarVectores_result)
        return this.equals((multiplicarVectores_result)that);
      return false;
    }

    public boolean equals(multiplicarVectores_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multiplicarVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicarVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicarVectores_resultStandardSchemeFactory implements SchemeFactory {
      public multiplicarVectores_resultStandardScheme getScheme() {
        return new multiplicarVectores_resultStandardScheme();
      }
    }

    private static class multiplicarVectores_resultStandardScheme extends StandardScheme<multiplicarVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicarVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    int _elem66;
                    _elem66 = iprot.readI32();
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicarVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter67 : struct.success)
            {
              oprot.writeI32(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicarVectores_resultTupleSchemeFactory implements SchemeFactory {
      public multiplicarVectores_resultTupleScheme getScheme() {
        return new multiplicarVectores_resultTupleScheme();
      }
    }

    private static class multiplicarVectores_resultTupleScheme extends TupleScheme<multiplicarVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicarVectores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter68 : struct.success)
            {
              oprot.writeI32(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicarVectores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              int _elem71;
              _elem71 = iprot.readI32();
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class productoVectorial_args implements org.apache.thrift.TBase<productoVectorial_args, productoVectorial_args._Fields>, java.io.Serializable, Cloneable, Comparable<productoVectorial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoVectorial_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new productoVectorial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new productoVectorial_argsTupleSchemeFactory());
    }

    public List<Integer> v1; // required
    public List<Integer> v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoVectorial_args.class, metaDataMap);
    }

    public productoVectorial_args() {
    }

    public productoVectorial_args(
      List<Integer> v1,
      List<Integer> v2)
    {
      this();
      this.v1 = v1;
      this.v2 = v2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoVectorial_args(productoVectorial_args other) {
      if (other.isSetV1()) {
        List<Integer> __this__v1 = new ArrayList<Integer>(other.v1);
        this.v1 = __this__v1;
      }
      if (other.isSetV2()) {
        List<Integer> __this__v2 = new ArrayList<Integer>(other.v2);
        this.v2 = __this__v2;
      }
    }

    public productoVectorial_args deepCopy() {
      return new productoVectorial_args(this);
    }

    @Override
    public void clear() {
      this.v1 = null;
      this.v2 = null;
    }

    public int getV1Size() {
      return (this.v1 == null) ? 0 : this.v1.size();
    }

    public java.util.Iterator<Integer> getV1Iterator() {
      return (this.v1 == null) ? null : this.v1.iterator();
    }

    public void addToV1(int elem) {
      if (this.v1 == null) {
        this.v1 = new ArrayList<Integer>();
      }
      this.v1.add(elem);
    }

    public List<Integer> getV1() {
      return this.v1;
    }

    public productoVectorial_args setV1(List<Integer> v1) {
      this.v1 = v1;
      return this;
    }

    public void unsetV1() {
      this.v1 = null;
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return this.v1 != null;
    }

    public void setV1IsSet(boolean value) {
      if (!value) {
        this.v1 = null;
      }
    }

    public int getV2Size() {
      return (this.v2 == null) ? 0 : this.v2.size();
    }

    public java.util.Iterator<Integer> getV2Iterator() {
      return (this.v2 == null) ? null : this.v2.iterator();
    }

    public void addToV2(int elem) {
      if (this.v2 == null) {
        this.v2 = new ArrayList<Integer>();
      }
      this.v2.add(elem);
    }

    public List<Integer> getV2() {
      return this.v2;
    }

    public productoVectorial_args setV2(List<Integer> v2) {
      this.v2 = v2;
      return this;
    }

    public void unsetV2() {
      this.v2 = null;
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return this.v2 != null;
    }

    public void setV2IsSet(boolean value) {
      if (!value) {
        this.v2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((List<Integer>)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return getV1();

      case V2:
        return getV2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof productoVectorial_args)
        return this.equals((productoVectorial_args)that);
      return false;
    }

    public boolean equals(productoVectorial_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true && this.isSetV1();
      boolean that_present_v1 = true && that.isSetV1();
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (!this.v1.equals(that.v1))
          return false;
      }

      boolean this_present_v2 = true && this.isSetV2();
      boolean that_present_v2 = true && that.isSetV2();
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (!this.v2.equals(that.v2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(productoVectorial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("productoVectorial_args(");
      boolean first = true;

      sb.append("v1:");
      if (this.v1 == null) {
        sb.append("null");
      } else {
        sb.append(this.v1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      if (this.v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.v2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoVectorial_argsStandardSchemeFactory implements SchemeFactory {
      public productoVectorial_argsStandardScheme getScheme() {
        return new productoVectorial_argsStandardScheme();
      }
    }

    private static class productoVectorial_argsStandardScheme extends StandardScheme<productoVectorial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, productoVectorial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.v1 = new ArrayList<Integer>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    int _elem74;
                    _elem74 = iprot.readI32();
                    struct.v1.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                  struct.v2 = new ArrayList<Integer>(_list75.size);
                  for (int _i76 = 0; _i76 < _list75.size; ++_i76)
                  {
                    int _elem77;
                    _elem77 = iprot.readI32();
                    struct.v2.add(_elem77);
                  }
                  iprot.readListEnd();
                }
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, productoVectorial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v1 != null) {
          oprot.writeFieldBegin(V1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v1.size()));
            for (int _iter78 : struct.v1)
            {
              oprot.writeI32(_iter78);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v2 != null) {
          oprot.writeFieldBegin(V2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v2.size()));
            for (int _iter79 : struct.v2)
            {
              oprot.writeI32(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoVectorial_argsTupleSchemeFactory implements SchemeFactory {
      public productoVectorial_argsTupleScheme getScheme() {
        return new productoVectorial_argsTupleScheme();
      }
    }

    private static class productoVectorial_argsTupleScheme extends TupleScheme<productoVectorial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoVectorial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetV1()) {
          {
            oprot.writeI32(struct.v1.size());
            for (int _iter80 : struct.v1)
            {
              oprot.writeI32(_iter80);
            }
          }
        }
        if (struct.isSetV2()) {
          {
            oprot.writeI32(struct.v2.size());
            for (int _iter81 : struct.v2)
            {
              oprot.writeI32(_iter81);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoVectorial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v1 = new ArrayList<Integer>(_list82.size);
            for (int _i83 = 0; _i83 < _list82.size; ++_i83)
            {
              int _elem84;
              _elem84 = iprot.readI32();
              struct.v1.add(_elem84);
            }
          }
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v2 = new ArrayList<Integer>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              int _elem87;
              _elem87 = iprot.readI32();
              struct.v2.add(_elem87);
            }
          }
          struct.setV2IsSet(true);
        }
      }
    }

  }

  public static class productoVectorial_result implements org.apache.thrift.TBase<productoVectorial_result, productoVectorial_result._Fields>, java.io.Serializable, Cloneable, Comparable<productoVectorial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoVectorial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new productoVectorial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new productoVectorial_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoVectorial_result.class, metaDataMap);
    }

    public productoVectorial_result() {
    }

    public productoVectorial_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoVectorial_result(productoVectorial_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public productoVectorial_result deepCopy() {
      return new productoVectorial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public productoVectorial_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof productoVectorial_result)
        return this.equals((productoVectorial_result)that);
      return false;
    }

    public boolean equals(productoVectorial_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(productoVectorial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("productoVectorial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoVectorial_resultStandardSchemeFactory implements SchemeFactory {
      public productoVectorial_resultStandardScheme getScheme() {
        return new productoVectorial_resultStandardScheme();
      }
    }

    private static class productoVectorial_resultStandardScheme extends StandardScheme<productoVectorial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, productoVectorial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    int _elem90;
                    _elem90 = iprot.readI32();
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, productoVectorial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter91 : struct.success)
            {
              oprot.writeI32(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoVectorial_resultTupleSchemeFactory implements SchemeFactory {
      public productoVectorial_resultTupleScheme getScheme() {
        return new productoVectorial_resultTupleScheme();
      }
    }

    private static class productoVectorial_resultTupleScheme extends TupleScheme<productoVectorial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoVectorial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter92 : struct.success)
            {
              oprot.writeI32(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoVectorial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              int _elem95;
              _elem95 = iprot.readI32();
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class productoEscalar_args implements org.apache.thrift.TBase<productoEscalar_args, productoEscalar_args._Fields>, java.io.Serializable, Cloneable, Comparable<productoEscalar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoEscalar_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new productoEscalar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new productoEscalar_argsTupleSchemeFactory());
    }

    public List<Integer> v1; // required
    public List<Integer> v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoEscalar_args.class, metaDataMap);
    }

    public productoEscalar_args() {
    }

    public productoEscalar_args(
      List<Integer> v1,
      List<Integer> v2)
    {
      this();
      this.v1 = v1;
      this.v2 = v2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoEscalar_args(productoEscalar_args other) {
      if (other.isSetV1()) {
        List<Integer> __this__v1 = new ArrayList<Integer>(other.v1);
        this.v1 = __this__v1;
      }
      if (other.isSetV2()) {
        List<Integer> __this__v2 = new ArrayList<Integer>(other.v2);
        this.v2 = __this__v2;
      }
    }

    public productoEscalar_args deepCopy() {
      return new productoEscalar_args(this);
    }

    @Override
    public void clear() {
      this.v1 = null;
      this.v2 = null;
    }

    public int getV1Size() {
      return (this.v1 == null) ? 0 : this.v1.size();
    }

    public java.util.Iterator<Integer> getV1Iterator() {
      return (this.v1 == null) ? null : this.v1.iterator();
    }

    public void addToV1(int elem) {
      if (this.v1 == null) {
        this.v1 = new ArrayList<Integer>();
      }
      this.v1.add(elem);
    }

    public List<Integer> getV1() {
      return this.v1;
    }

    public productoEscalar_args setV1(List<Integer> v1) {
      this.v1 = v1;
      return this;
    }

    public void unsetV1() {
      this.v1 = null;
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return this.v1 != null;
    }

    public void setV1IsSet(boolean value) {
      if (!value) {
        this.v1 = null;
      }
    }

    public int getV2Size() {
      return (this.v2 == null) ? 0 : this.v2.size();
    }

    public java.util.Iterator<Integer> getV2Iterator() {
      return (this.v2 == null) ? null : this.v2.iterator();
    }

    public void addToV2(int elem) {
      if (this.v2 == null) {
        this.v2 = new ArrayList<Integer>();
      }
      this.v2.add(elem);
    }

    public List<Integer> getV2() {
      return this.v2;
    }

    public productoEscalar_args setV2(List<Integer> v2) {
      this.v2 = v2;
      return this;
    }

    public void unsetV2() {
      this.v2 = null;
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return this.v2 != null;
    }

    public void setV2IsSet(boolean value) {
      if (!value) {
        this.v2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((List<Integer>)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return getV1();

      case V2:
        return getV2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof productoEscalar_args)
        return this.equals((productoEscalar_args)that);
      return false;
    }

    public boolean equals(productoEscalar_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true && this.isSetV1();
      boolean that_present_v1 = true && that.isSetV1();
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (!this.v1.equals(that.v1))
          return false;
      }

      boolean this_present_v2 = true && this.isSetV2();
      boolean that_present_v2 = true && that.isSetV2();
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (!this.v2.equals(that.v2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(productoEscalar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("productoEscalar_args(");
      boolean first = true;

      sb.append("v1:");
      if (this.v1 == null) {
        sb.append("null");
      } else {
        sb.append(this.v1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      if (this.v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.v2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoEscalar_argsStandardSchemeFactory implements SchemeFactory {
      public productoEscalar_argsStandardScheme getScheme() {
        return new productoEscalar_argsStandardScheme();
      }
    }

    private static class productoEscalar_argsStandardScheme extends StandardScheme<productoEscalar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, productoEscalar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.v1 = new ArrayList<Integer>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    int _elem98;
                    _elem98 = iprot.readI32();
                    struct.v1.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                  struct.v2 = new ArrayList<Integer>(_list99.size);
                  for (int _i100 = 0; _i100 < _list99.size; ++_i100)
                  {
                    int _elem101;
                    _elem101 = iprot.readI32();
                    struct.v2.add(_elem101);
                  }
                  iprot.readListEnd();
                }
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, productoEscalar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v1 != null) {
          oprot.writeFieldBegin(V1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v1.size()));
            for (int _iter102 : struct.v1)
            {
              oprot.writeI32(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v2 != null) {
          oprot.writeFieldBegin(V2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.v2.size()));
            for (int _iter103 : struct.v2)
            {
              oprot.writeI32(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoEscalar_argsTupleSchemeFactory implements SchemeFactory {
      public productoEscalar_argsTupleScheme getScheme() {
        return new productoEscalar_argsTupleScheme();
      }
    }

    private static class productoEscalar_argsTupleScheme extends TupleScheme<productoEscalar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoEscalar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetV1()) {
          {
            oprot.writeI32(struct.v1.size());
            for (int _iter104 : struct.v1)
            {
              oprot.writeI32(_iter104);
            }
          }
        }
        if (struct.isSetV2()) {
          {
            oprot.writeI32(struct.v2.size());
            for (int _iter105 : struct.v2)
            {
              oprot.writeI32(_iter105);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoEscalar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v1 = new ArrayList<Integer>(_list106.size);
            for (int _i107 = 0; _i107 < _list106.size; ++_i107)
            {
              int _elem108;
              _elem108 = iprot.readI32();
              struct.v1.add(_elem108);
            }
          }
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.v2 = new ArrayList<Integer>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              int _elem111;
              _elem111 = iprot.readI32();
              struct.v2.add(_elem111);
            }
          }
          struct.setV2IsSet(true);
        }
      }
    }

  }

  public static class productoEscalar_result implements org.apache.thrift.TBase<productoEscalar_result, productoEscalar_result._Fields>, java.io.Serializable, Cloneable, Comparable<productoEscalar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoEscalar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new productoEscalar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new productoEscalar_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoEscalar_result.class, metaDataMap);
    }

    public productoEscalar_result() {
    }

    public productoEscalar_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoEscalar_result(productoEscalar_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public productoEscalar_result deepCopy() {
      return new productoEscalar_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public productoEscalar_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof productoEscalar_result)
        return this.equals((productoEscalar_result)that);
      return false;
    }

    public boolean equals(productoEscalar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(productoEscalar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("productoEscalar_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoEscalar_resultStandardSchemeFactory implements SchemeFactory {
      public productoEscalar_resultStandardScheme getScheme() {
        return new productoEscalar_resultStandardScheme();
      }
    }

    private static class productoEscalar_resultStandardScheme extends StandardScheme<productoEscalar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, productoEscalar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, productoEscalar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoEscalar_resultTupleSchemeFactory implements SchemeFactory {
      public productoEscalar_resultTupleScheme getScheme() {
        return new productoEscalar_resultTupleScheme();
      }
    }

    private static class productoEscalar_resultTupleScheme extends TupleScheme<productoEscalar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoEscalar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoEscalar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class productoMatrices_args implements org.apache.thrift.TBase<productoMatrices_args, productoMatrices_args._Fields>, java.io.Serializable, Cloneable, Comparable<productoMatrices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoMatrices_args");

    private static final org.apache.thrift.protocol.TField M1_FIELD_DESC = new org.apache.thrift.protocol.TField("m1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField M2_FIELD_DESC = new org.apache.thrift.protocol.TField("m2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new productoMatrices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new productoMatrices_argsTupleSchemeFactory());
    }

    public List<List<Integer>> m1; // required
    public List<List<Integer>> m2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M1((short)1, "m1"),
      M2((short)2, "m2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M1
            return M1;
          case 2: // M2
            return M2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M1, new org.apache.thrift.meta_data.FieldMetaData("m1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
      tmpMap.put(_Fields.M2, new org.apache.thrift.meta_data.FieldMetaData("m2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoMatrices_args.class, metaDataMap);
    }

    public productoMatrices_args() {
    }

    public productoMatrices_args(
      List<List<Integer>> m1,
      List<List<Integer>> m2)
    {
      this();
      this.m1 = m1;
      this.m2 = m2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoMatrices_args(productoMatrices_args other) {
      if (other.isSetM1()) {
        List<List<Integer>> __this__m1 = new ArrayList<List<Integer>>(other.m1.size());
        for (List<Integer> other_element : other.m1) {
          List<Integer> __this__m1_copy = new ArrayList<Integer>(other_element);
          __this__m1.add(__this__m1_copy);
        }
        this.m1 = __this__m1;
      }
      if (other.isSetM2()) {
        List<List<Integer>> __this__m2 = new ArrayList<List<Integer>>(other.m2.size());
        for (List<Integer> other_element : other.m2) {
          List<Integer> __this__m2_copy = new ArrayList<Integer>(other_element);
          __this__m2.add(__this__m2_copy);
        }
        this.m2 = __this__m2;
      }
    }

    public productoMatrices_args deepCopy() {
      return new productoMatrices_args(this);
    }

    @Override
    public void clear() {
      this.m1 = null;
      this.m2 = null;
    }

    public int getM1Size() {
      return (this.m1 == null) ? 0 : this.m1.size();
    }

    public java.util.Iterator<List<Integer>> getM1Iterator() {
      return (this.m1 == null) ? null : this.m1.iterator();
    }

    public void addToM1(List<Integer> elem) {
      if (this.m1 == null) {
        this.m1 = new ArrayList<List<Integer>>();
      }
      this.m1.add(elem);
    }

    public List<List<Integer>> getM1() {
      return this.m1;
    }

    public productoMatrices_args setM1(List<List<Integer>> m1) {
      this.m1 = m1;
      return this;
    }

    public void unsetM1() {
      this.m1 = null;
    }

    /** Returns true if field m1 is set (has been assigned a value) and false otherwise */
    public boolean isSetM1() {
      return this.m1 != null;
    }

    public void setM1IsSet(boolean value) {
      if (!value) {
        this.m1 = null;
      }
    }

    public int getM2Size() {
      return (this.m2 == null) ? 0 : this.m2.size();
    }

    public java.util.Iterator<List<Integer>> getM2Iterator() {
      return (this.m2 == null) ? null : this.m2.iterator();
    }

    public void addToM2(List<Integer> elem) {
      if (this.m2 == null) {
        this.m2 = new ArrayList<List<Integer>>();
      }
      this.m2.add(elem);
    }

    public List<List<Integer>> getM2() {
      return this.m2;
    }

    public productoMatrices_args setM2(List<List<Integer>> m2) {
      this.m2 = m2;
      return this;
    }

    public void unsetM2() {
      this.m2 = null;
    }

    /** Returns true if field m2 is set (has been assigned a value) and false otherwise */
    public boolean isSetM2() {
      return this.m2 != null;
    }

    public void setM2IsSet(boolean value) {
      if (!value) {
        this.m2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case M1:
        if (value == null) {
          unsetM1();
        } else {
          setM1((List<List<Integer>>)value);
        }
        break;

      case M2:
        if (value == null) {
          unsetM2();
        } else {
          setM2((List<List<Integer>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case M1:
        return getM1();

      case M2:
        return getM2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case M1:
        return isSetM1();
      case M2:
        return isSetM2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof productoMatrices_args)
        return this.equals((productoMatrices_args)that);
      return false;
    }

    public boolean equals(productoMatrices_args that) {
      if (that == null)
        return false;

      boolean this_present_m1 = true && this.isSetM1();
      boolean that_present_m1 = true && that.isSetM1();
      if (this_present_m1 || that_present_m1) {
        if (!(this_present_m1 && that_present_m1))
          return false;
        if (!this.m1.equals(that.m1))
          return false;
      }

      boolean this_present_m2 = true && this.isSetM2();
      boolean that_present_m2 = true && that.isSetM2();
      if (this_present_m2 || that_present_m2) {
        if (!(this_present_m2 && that_present_m2))
          return false;
        if (!this.m2.equals(that.m2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(productoMatrices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetM1()).compareTo(other.isSetM1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m1, other.m1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetM2()).compareTo(other.isSetM2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m2, other.m2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("productoMatrices_args(");
      boolean first = true;

      sb.append("m1:");
      if (this.m1 == null) {
        sb.append("null");
      } else {
        sb.append(this.m1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("m2:");
      if (this.m2 == null) {
        sb.append("null");
      } else {
        sb.append(this.m2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoMatrices_argsStandardSchemeFactory implements SchemeFactory {
      public productoMatrices_argsStandardScheme getScheme() {
        return new productoMatrices_argsStandardScheme();
      }
    }

    private static class productoMatrices_argsStandardScheme extends StandardScheme<productoMatrices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, productoMatrices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.m1 = new ArrayList<List<Integer>>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    List<Integer> _elem114;
                    {
                      org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                      _elem114 = new ArrayList<Integer>(_list115.size);
                      for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                      {
                        int _elem117;
                        _elem117 = iprot.readI32();
                        _elem114.add(_elem117);
                      }
                      iprot.readListEnd();
                    }
                    struct.m1.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setM1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // M2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                  struct.m2 = new ArrayList<List<Integer>>(_list118.size);
                  for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                  {
                    List<Integer> _elem120;
                    {
                      org.apache.thrift.protocol.TList _list121 = iprot.readListBegin();
                      _elem120 = new ArrayList<Integer>(_list121.size);
                      for (int _i122 = 0; _i122 < _list121.size; ++_i122)
                      {
                        int _elem123;
                        _elem123 = iprot.readI32();
                        _elem120.add(_elem123);
                      }
                      iprot.readListEnd();
                    }
                    struct.m2.add(_elem120);
                  }
                  iprot.readListEnd();
                }
                struct.setM2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, productoMatrices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.m1 != null) {
          oprot.writeFieldBegin(M1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m1.size()));
            for (List<Integer> _iter124 : struct.m1)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter124.size()));
                for (int _iter125 : _iter124)
                {
                  oprot.writeI32(_iter125);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.m2 != null) {
          oprot.writeFieldBegin(M2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m2.size()));
            for (List<Integer> _iter126 : struct.m2)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter126.size()));
                for (int _iter127 : _iter126)
                {
                  oprot.writeI32(_iter127);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoMatrices_argsTupleSchemeFactory implements SchemeFactory {
      public productoMatrices_argsTupleScheme getScheme() {
        return new productoMatrices_argsTupleScheme();
      }
    }

    private static class productoMatrices_argsTupleScheme extends TupleScheme<productoMatrices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoMatrices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetM1()) {
          optionals.set(0);
        }
        if (struct.isSetM2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetM1()) {
          {
            oprot.writeI32(struct.m1.size());
            for (List<Integer> _iter128 : struct.m1)
            {
              {
                oprot.writeI32(_iter128.size());
                for (int _iter129 : _iter128)
                {
                  oprot.writeI32(_iter129);
                }
              }
            }
          }
        }
        if (struct.isSetM2()) {
          {
            oprot.writeI32(struct.m2.size());
            for (List<Integer> _iter130 : struct.m2)
            {
              {
                oprot.writeI32(_iter130.size());
                for (int _iter131 : _iter130)
                {
                  oprot.writeI32(_iter131);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoMatrices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list132 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.m1 = new ArrayList<List<Integer>>(_list132.size);
            for (int _i133 = 0; _i133 < _list132.size; ++_i133)
            {
              List<Integer> _elem134;
              {
                org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _elem134 = new ArrayList<Integer>(_list135.size);
                for (int _i136 = 0; _i136 < _list135.size; ++_i136)
                {
                  int _elem137;
                  _elem137 = iprot.readI32();
                  _elem134.add(_elem137);
                }
              }
              struct.m1.add(_elem134);
            }
          }
          struct.setM1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.m2 = new ArrayList<List<Integer>>(_list138.size);
            for (int _i139 = 0; _i139 < _list138.size; ++_i139)
            {
              List<Integer> _elem140;
              {
                org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _elem140 = new ArrayList<Integer>(_list141.size);
                for (int _i142 = 0; _i142 < _list141.size; ++_i142)
                {
                  int _elem143;
                  _elem143 = iprot.readI32();
                  _elem140.add(_elem143);
                }
              }
              struct.m2.add(_elem140);
            }
          }
          struct.setM2IsSet(true);
        }
      }
    }

  }

  public static class productoMatrices_result implements org.apache.thrift.TBase<productoMatrices_result, productoMatrices_result._Fields>, java.io.Serializable, Cloneable, Comparable<productoMatrices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoMatrices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new productoMatrices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new productoMatrices_resultTupleSchemeFactory());
    }

    public List<List<Integer>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoMatrices_result.class, metaDataMap);
    }

    public productoMatrices_result() {
    }

    public productoMatrices_result(
      List<List<Integer>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoMatrices_result(productoMatrices_result other) {
      if (other.isSetSuccess()) {
        List<List<Integer>> __this__success = new ArrayList<List<Integer>>(other.success.size());
        for (List<Integer> other_element : other.success) {
          List<Integer> __this__success_copy = new ArrayList<Integer>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public productoMatrices_result deepCopy() {
      return new productoMatrices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Integer>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Integer> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Integer>>();
      }
      this.success.add(elem);
    }

    public List<List<Integer>> getSuccess() {
      return this.success;
    }

    public productoMatrices_result setSuccess(List<List<Integer>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Integer>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof productoMatrices_result)
        return this.equals((productoMatrices_result)that);
      return false;
    }

    public boolean equals(productoMatrices_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(productoMatrices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("productoMatrices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoMatrices_resultStandardSchemeFactory implements SchemeFactory {
      public productoMatrices_resultStandardScheme getScheme() {
        return new productoMatrices_resultStandardScheme();
      }
    }

    private static class productoMatrices_resultStandardScheme extends StandardScheme<productoMatrices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, productoMatrices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Integer>>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    List<Integer> _elem146;
                    {
                      org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                      _elem146 = new ArrayList<Integer>(_list147.size);
                      for (int _i148 = 0; _i148 < _list147.size; ++_i148)
                      {
                        int _elem149;
                        _elem149 = iprot.readI32();
                        _elem146.add(_elem149);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, productoMatrices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Integer> _iter150 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter150.size()));
                for (int _iter151 : _iter150)
                {
                  oprot.writeI32(_iter151);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoMatrices_resultTupleSchemeFactory implements SchemeFactory {
      public productoMatrices_resultTupleScheme getScheme() {
        return new productoMatrices_resultTupleScheme();
      }
    }

    private static class productoMatrices_resultTupleScheme extends TupleScheme<productoMatrices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoMatrices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Integer> _iter152 : struct.success)
            {
              {
                oprot.writeI32(_iter152.size());
                for (int _iter153 : _iter152)
                {
                  oprot.writeI32(_iter153);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoMatrices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Integer>>(_list154.size);
            for (int _i155 = 0; _i155 < _list154.size; ++_i155)
            {
              List<Integer> _elem156;
              {
                org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _elem156 = new ArrayList<Integer>(_list157.size);
                for (int _i158 = 0; _i158 < _list157.size; ++_i158)
                {
                  int _elem159;
                  _elem159 = iprot.readI32();
                  _elem156.add(_elem159);
                }
              }
              struct.success.add(_elem156);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
